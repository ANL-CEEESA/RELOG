{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RELOG: Reverse Logistics Optimization RELOG is a supply chain optimization package focusing on reverse logistics and reverse manufacturing. For example, the package can be used to determine where to build recycling plants, what sizes should they have and which customers should be served by which plants. The package supports customized reverse logistics pipelines, with multiple types of plants, multiple types of product and multiple time periods. Table of Contents Installation Modeling Optimizing Source Code https://github.com/iSoron/RELOG Authors Alinson S. Xavier, Argonne National Laboratory < axavier@anl.gov > Nwike Iloeje, Argonne National Laboratory < ciloeje@anl.gov > License RELOG: Reverse Logistics Optimization Copyright \u00a9 2020, UChicago Argonne, LLC. All Rights Reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Home"},{"location":"#relog-reverse-logistics-optimization","text":"RELOG is a supply chain optimization package focusing on reverse logistics and reverse manufacturing. For example, the package can be used to determine where to build recycling plants, what sizes should they have and which customers should be served by which plants. The package supports customized reverse logistics pipelines, with multiple types of plants, multiple types of product and multiple time periods.","title":"RELOG: Reverse Logistics Optimization"},{"location":"#table-of-contents","text":"Installation Modeling Optimizing","title":"Table of Contents"},{"location":"#source-code","text":"https://github.com/iSoron/RELOG","title":"Source Code"},{"location":"#authors","text":"Alinson S. Xavier, Argonne National Laboratory < axavier@anl.gov > Nwike Iloeje, Argonne National Laboratory < ciloeje@anl.gov >","title":"Authors"},{"location":"#license","text":"RELOG: Reverse Logistics Optimization Copyright \u00a9 2020, UChicago Argonne, LLC. All Rights Reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"install/","text":"Installation The package was developed and tested with Julia 1.3 and may not be compatible with newer versions. To install it, launch the Julia console, type ] to switch to package manager mode and run: pkg> add https://github.com/iSoron/RELOG.git To make sure that the package has been correctly installed: pkg> test RELOG","title":"Install"},{"location":"install/#installation","text":"The package was developed and tested with Julia 1.3 and may not be compatible with newer versions. To install it, launch the Julia console, type ] to switch to package manager mode and run: pkg> add https://github.com/iSoron/RELOG.git To make sure that the package has been correctly installed: pkg> test RELOG","title":"Installation"},{"location":"model/","text":"Modeling The first step when using RELOG is to describe the reverse logistics pipeline and the relevant data. RELOG accepts as input a JSON file with three sections: parameters , products and plants . Below, we describe each section in more detail. Parameters The parameters section describes details about the simulation itself. Key Description time periods Number of time periods in the simulation. Example { \"parameters\": { \"time periods\": 2 } } Products The products section describes all products and subproducts in the simulation. The field instance[\"products\"] is a dictionary mapping the name of the product to a dictionary which describes its characteristics. Each product description contains the following keys: Key Description transportation cost The cost (in dollars per km per tonnes) to transport this product. Must be a timeseries. initial amounts A dictionary mapping the name of each location to its description (see below). If this product is not initially available, this key may be omitted. Must be a timeseries. Each product may have some amount available at the beginning of each time period. In this case, the key initial amounts maps to a dictionary with the following keys: Key Description latitude The latitude of the location, in degrees. longitude The longitude of the location, in degrees. amount The amount (in tonnes) of the product initially available at the location. Must be a timeseries. Example { \"products\": { \"P1\": { \"transportation cost\": [0.015, 0.015], \"initial amounts\": { \"C1\": { \"latitude\": 7.0, \"longitude\": 7.0, \"amount\": [934.56, 934.56] }, \"C2\": { \"latitude\": 7.0, \"longitude\": 19.0, \"amount\": [198.95, 198.95] }, \"C3\": { \"latitude\": 84.0, \"longitude\": 76.0, \"amount\": [212.97, 212.97] } } }, \"P2\": { \"transportation cost\": [0.02, 0.02] }, \"P3\": { \"transportation cost\": [0.0125, 0.0125] }, \"P4\": { \"transportation cost\": [0.0175, 0.0175] } } } Processing Plants The plants section describes the available types of reverse manufacturing plants, their potential locations and associated costs, as well as their inputs and outputs. The field instance[\"plants\"] is a dictionary mapping the name of the plant to a dictionary with the following keys: Key Description input The name of the product that this plant takes as input. Only one input is accepted per plant. outputs A dictionary specifying how many tonnes of each product is produced for each tonnes of input. For example, if the plant outputs 0.5 tonnes of P2 and 0.25 tonnes of P3 for each tonnes of P1 provided, then this entry should be {\"P2\": 0.5, \"P3\": 0.25} . If the plant does not output anything, this key may be omitted. locations A dictionary mapping the name of the location to a dictionary which describes the site characteristics (see below). Each type of plant is associated with a set of potential locations where it can be built. Each location is represented by a dictionary with the following keys: Key Description latitude The latitude of the location, in degrees. longitude The longitude of the location, in degrees. disposal A dictionary describing what products can be disposed locally at the plant. capacities A dictionary describing what plant sizes are allowed, and their characteristics. The keys in the disposal dictionary should be the names of the products. The values are dictionaries with the following keys: Key Description cost The cost (in dollars per tonnes) to dispose of the product. Must be a timeseries. limit The maximum amount (in tonnes) that can be disposed of. If an unlimited amount can be disposed, this key may be omitted. Must be a timeseries. The keys in the capacities dictionary should be the amounts (in tonnes). The values are dictionaries with the following keys: Key Description opening cost The cost (in dollars) to open a plant of this size. fixed operating cost The cost (in dollars) to keep the plant open, even if the plant doesn't process anything. Must be a timeseries. variable operating cost The cost (in dollars per tonnes) that the plant incurs to process each tonne of input. Must be a timeseries. Example { \"plants\": { \"F1\": { \"input\": \"P1\", \"outputs\": { \"P2\": 0.2, \"P3\": 0.5 }, \"locations\": { \"L1\": { \"latitude\": 0.0, \"longitude\": 0.0, \"disposal\": { \"P2\": { \"cost\": [-10.0, -12.0], \"limit\": [1.0, 1.0] } }, \"capacities\": { \"100\": { \"opening cost\": [500, 530], \"fixed operating cost\": [300.0, 310.0], \"variable operating cost\": [5.0, 5.2] }, \"500\": { \"opening cost\": [750, 760], \"fixed operating cost\": [400.0, 450.0], \"variable operating cost\": [4.5, 4.7] }, \"700\": { \"opening cost\": [1000, 1000], \"fixed operating cost\": [500.0, 600.0], \"variable operating cost\": [4.0, 4.4] } } } } } } } Model Assumptions Each plant can only be opened exactly once. After open, the plant remains open until the end of the simulation. Plants can be expanded at any time, even long after they are open. Variable and fixed operating costs do not change according to plant size. All material available at the beginning of a time period must be entirely processed by the end of that time period. It is not possible to store unprocessed materials from one time period to the next.","title":"Model"},{"location":"model/#modeling","text":"The first step when using RELOG is to describe the reverse logistics pipeline and the relevant data. RELOG accepts as input a JSON file with three sections: parameters , products and plants . Below, we describe each section in more detail.","title":"Modeling"},{"location":"model/#parameters","text":"The parameters section describes details about the simulation itself. Key Description time periods Number of time periods in the simulation.","title":"Parameters"},{"location":"model/#example","text":"{ \"parameters\": { \"time periods\": 2 } }","title":"Example"},{"location":"model/#products","text":"The products section describes all products and subproducts in the simulation. The field instance[\"products\"] is a dictionary mapping the name of the product to a dictionary which describes its characteristics. Each product description contains the following keys: Key Description transportation cost The cost (in dollars per km per tonnes) to transport this product. Must be a timeseries. initial amounts A dictionary mapping the name of each location to its description (see below). If this product is not initially available, this key may be omitted. Must be a timeseries. Each product may have some amount available at the beginning of each time period. In this case, the key initial amounts maps to a dictionary with the following keys: Key Description latitude The latitude of the location, in degrees. longitude The longitude of the location, in degrees. amount The amount (in tonnes) of the product initially available at the location. Must be a timeseries.","title":"Products"},{"location":"model/#example_1","text":"{ \"products\": { \"P1\": { \"transportation cost\": [0.015, 0.015], \"initial amounts\": { \"C1\": { \"latitude\": 7.0, \"longitude\": 7.0, \"amount\": [934.56, 934.56] }, \"C2\": { \"latitude\": 7.0, \"longitude\": 19.0, \"amount\": [198.95, 198.95] }, \"C3\": { \"latitude\": 84.0, \"longitude\": 76.0, \"amount\": [212.97, 212.97] } } }, \"P2\": { \"transportation cost\": [0.02, 0.02] }, \"P3\": { \"transportation cost\": [0.0125, 0.0125] }, \"P4\": { \"transportation cost\": [0.0175, 0.0175] } } }","title":"Example"},{"location":"model/#processing-plants","text":"The plants section describes the available types of reverse manufacturing plants, their potential locations and associated costs, as well as their inputs and outputs. The field instance[\"plants\"] is a dictionary mapping the name of the plant to a dictionary with the following keys: Key Description input The name of the product that this plant takes as input. Only one input is accepted per plant. outputs A dictionary specifying how many tonnes of each product is produced for each tonnes of input. For example, if the plant outputs 0.5 tonnes of P2 and 0.25 tonnes of P3 for each tonnes of P1 provided, then this entry should be {\"P2\": 0.5, \"P3\": 0.25} . If the plant does not output anything, this key may be omitted. locations A dictionary mapping the name of the location to a dictionary which describes the site characteristics (see below). Each type of plant is associated with a set of potential locations where it can be built. Each location is represented by a dictionary with the following keys: Key Description latitude The latitude of the location, in degrees. longitude The longitude of the location, in degrees. disposal A dictionary describing what products can be disposed locally at the plant. capacities A dictionary describing what plant sizes are allowed, and their characteristics. The keys in the disposal dictionary should be the names of the products. The values are dictionaries with the following keys: Key Description cost The cost (in dollars per tonnes) to dispose of the product. Must be a timeseries. limit The maximum amount (in tonnes) that can be disposed of. If an unlimited amount can be disposed, this key may be omitted. Must be a timeseries. The keys in the capacities dictionary should be the amounts (in tonnes). The values are dictionaries with the following keys: Key Description opening cost The cost (in dollars) to open a plant of this size. fixed operating cost The cost (in dollars) to keep the plant open, even if the plant doesn't process anything. Must be a timeseries. variable operating cost The cost (in dollars per tonnes) that the plant incurs to process each tonne of input. Must be a timeseries.","title":"Processing Plants"},{"location":"model/#example_2","text":"{ \"plants\": { \"F1\": { \"input\": \"P1\", \"outputs\": { \"P2\": 0.2, \"P3\": 0.5 }, \"locations\": { \"L1\": { \"latitude\": 0.0, \"longitude\": 0.0, \"disposal\": { \"P2\": { \"cost\": [-10.0, -12.0], \"limit\": [1.0, 1.0] } }, \"capacities\": { \"100\": { \"opening cost\": [500, 530], \"fixed operating cost\": [300.0, 310.0], \"variable operating cost\": [5.0, 5.2] }, \"500\": { \"opening cost\": [750, 760], \"fixed operating cost\": [400.0, 450.0], \"variable operating cost\": [4.5, 4.7] }, \"700\": { \"opening cost\": [1000, 1000], \"fixed operating cost\": [500.0, 600.0], \"variable operating cost\": [4.0, 4.4] } } } } } } }","title":"Example"},{"location":"model/#model-assumptions","text":"Each plant can only be opened exactly once. After open, the plant remains open until the end of the simulation. Plants can be expanded at any time, even long after they are open. Variable and fixed operating costs do not change according to plant size. All material available at the beginning of a time period must be entirely processed by the end of that time period. It is not possible to store unprocessed materials from one time period to the next.","title":"Model Assumptions"},{"location":"optimize/","text":"Optimizing After creating a JSON file describing the reverse manufacturing process and the input data, the following example illustrates how to use the package to find the optimal set of decisions: using RELOG RELOG.solve(\"/home/user/instance.json\") The optimal logistics plan will be printed to the screen.","title":"Optimize"},{"location":"optimize/#optimizing","text":"After creating a JSON file describing the reverse manufacturing process and the input data, the following example illustrates how to use the package to find the optimal set of decisions: using RELOG RELOG.solve(\"/home/user/instance.json\") The optimal logistics plan will be printed to the screen.","title":"Optimizing"}]}